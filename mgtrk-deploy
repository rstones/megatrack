#!/usr/bin/env python

'''
Usage:

./mgtrk-deploy <branch-name> <env>

'''

import argparse
from invoke import run, UnexpectedExit
from fabric import Connection

# get branch name and env from command line args
parser = argparse.ArgumentParser(description="Deploy megatrack atlas to staging and production environments. Requires config files .mgtrk-deploy.staging and .mgtrk-deploy.prod.")

parser.add_argument('branch_name',
                    help='The branch to deploy')

parser.add_argument('env',
                    choices=['staging', 'prod'],
                    help='The environment to deploy to')

args = parser.parse_args()

branch_name = args.branch_name
env = args.env

config_fn = f'.mgtrk-deploy-cfg.{env}'

try:
    # check existence of config file for the env specified
    # and parse config key-value pairs
    with open(config_fn) as f:
        config = {}
        for line in f.readlines():
            line = line.strip()
            if line and line[0] != '#':
                key_value = line.split('=')
                if len(key_value) != 2:
                    raise ValueError(f'Bad config format {line} found in config file {config_fn}')
                config[key_value[0].strip()] = key_value[1].strip()
            else:
                continue
        
except IOError as ioe:
    # the file doesn't exist? exit
    print(f'Couldn\'t find config file {config_fn} in current directory: {str(ioe)}')
    exit()
except ValueError as ve:
    # config file format is wrong, exit
    print(f'Config file format is wrong: {str(ve)}')
    exit()


# check that required keys (host, user, password, working_dir) are present
try:
    config['host']
    config['user']
    config['password']
    config['working_dir']
except KeyError as ke:
    # missing required config from .mgtrk-deploy.<env>
    print(f'Required arg missing from config file: {str(ke)}')
    exit()


def checkout_exit(branch):
    run(f'git checkout {branch}', hide=True)
    exit()

# make sure we are in the correct repo ie. megatrack
try:
    remote_url = run('git remote get-url origin', hide=True).stdout.strip()

    if remote_url != 'git@github.com:rstones/megatrack.git':
        print(f'This repo isn\'t linked to the correct remote! Current remote is {remote_url}')
        exit()

    starting_branch = run('git rev-parse --abbrev-ref HEAD', hide=True).stdout

except UnexpectedExit:
    print('Error getting remote url and current branch. Check git is installed and you are running this deploy script from a git repo.')
    exit()


# make sure all changes are committed and everything up to date with remote

# checkout required branch
try:
    checkout_result = run(f'git checkout {branch_name}', hide=True)
except UnexpectedExit:
    print(f'Error checking out branch {branch_name}. Exiting...')
    exit()


# get the git submodules associated with this repo

try:
    submodule_paths = []
    with open('.gitmodules') as f:
        for line in f.readlines():
            line = line.strip()
            key_value = line.split('=')
            if key_value[0].strip() == 'path':
                submodule_paths.append(key_value[1].strip())

except IOError as ioe:
    print('Error...')
    checkout_exit(starting_branch)



# get status, check all changes commited
try:
    status_result = run('git status --porcelain', hide=True)
    output = status_result.stdout

    # parse output if any
    # warn about uncommited changes
    # warn about changes to submodules (but ignore them for now)
    # suggest commiting changes and make sure up to date with remote
    if output:
        # parse, warn about uncommited changes
        output = output.split('\n')
        for change in output:
            filepath = change[3:]
            if not filepath or filepath in submodule_paths:
                continue
            else:
                print('There are uncommited changes in this branch. Fix this before continuing.')
                checkout_exit(starting_branch)
    else:
        pass

except UnexpectedExit:
    # error getting status, exit?
    checkout_exit(starting_branch)

# check branch is up-to-date with remote
# suggest make sure up to date with remote before continuing
try:
    uptodate_result = run('git status -uno', hide=True).stdout

    if 'Your branch is up-to-date with' not in uptodate_result:
        print(f'Branch {branch_name} is not up to date with remote. Fix this before continuing...')
        checkout_exit(starting_branch)
        
except UnexpectedExit:
    # error getting up to date status, exit
    checkout_exit(starting_branch)

# change back to current_branch
try:
    print(f'Reverting to branch {starting_branch}...')
    checkout_result = run(f'git checkout {starting_branch}', hide=True)
except UnexpectedExit:
    print(f'Could not revert to branch {starting_branch}. Now on branch {branch_name}.')
    checkout_exit(starting_branch)


# ssh to env server
# cd to directory specified in config
# git pull branch-name from remote
# run tests, exit on test failure
# docker-compose up -d --build (boot.sh can upgrade db on container startup)

c = Connection(
        host=config['host'],
        user=config['user'],
        connect_kwargs={'password': config['password']}
        )


pull_cmd = f"cd {config['working_dir']}"
pull_cmd += ' && git fetch'
pull_cmd += f' && git checkout {branch_name}'
pull_cmd += ' && git pull'

print(pull_cmd)

pull_result = c.run(pull_cmd)

test_cmd = f"cd {config['working_dir']}"
test_cmd += ' && source megatrackvenv/bin/activate'
test_cmd += ' && export APP_CONFIG=../.test-cfg'
test_cmd += ' && nose2'

print(test_cmd)

test_result = c.run(test_cmd)

print(test_result.exited)
print(test_result.ok)


#docker_result = c.run(f'docker-compose up -d --build')

# write deployment logs to log/ directory


# use git-annex to manage data directory and push/pull data around between envs


# or write deployment logs to a file stored in version control?
# can use to rollback to master from latest version if needed
# or can use to merge successful branch deploy into master
# can warn about branches not yet merged to master at start of next deploy?
